
Traffic Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  00000d0e  00000da2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  008000a6  008000a6  00000de8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000de8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00000e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019d2  00000000  00000000  00001020  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a74  00000000  00000000  000029f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d6e  00000000  00000000  00003466  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000404  00000000  00000000  000041d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007c3  00000000  00000000  000045d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010a0  00000000  00000000  00004d9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00005e3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__vector_10>
  2c:	0c 94 33 03 	jmp	0x666	; 0x666 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e0       	ldi	r30, 0x0E	; 14
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3a       	cpi	r26, 0xA6	; 166
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 ea       	ldi	r26, 0xA6	; 166
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3b       	cpi	r26, 0xB0	; 176
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 55 02 	call	0x4aa	; 0x4aa <main>
  8a:	0c 94 85 06 	jmp	0xd0a	; 0xd0a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <GPIO_voidSetPinDDR>:
				break;
			case GPIOC :
				TOG_BIT(PORTC, copy_u8Pin);
				break;
			case GPIOD :
				TOG_BIT(PORTD, copy_u8Pin);
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	01 f1       	breq	.+64     	; 0xd6 <GPIO_voidSetPinDDR+0x44>
  96:	30 f0       	brcs	.+12     	; 0xa4 <GPIO_voidSetPinDDR+0x12>
  98:	82 30       	cpi	r24, 0x02	; 2
  9a:	b1 f1       	breq	.+108    	; 0x108 <GPIO_voidSetPinDDR+0x76>
  9c:	83 30       	cpi	r24, 0x03	; 3
  9e:	09 f4       	brne	.+2      	; 0xa2 <GPIO_voidSetPinDDR+0x10>
  a0:	4c c0       	rjmp	.+152    	; 0x13a <GPIO_voidSetPinDDR+0xa8>
  a2:	08 95       	ret
  a4:	41 30       	cpi	r20, 0x01	; 1
  a6:	59 f4       	brne	.+22     	; 0xbe <GPIO_voidSetPinDDR+0x2c>
  a8:	2a b3       	in	r18, 0x1a	; 26
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_voidSetPinDDR+0x22>
  b0:	88 0f       	add	r24, r24
  b2:	99 1f       	adc	r25, r25
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_voidSetPinDDR+0x1e>
  b8:	82 2b       	or	r24, r18
  ba:	8a bb       	out	0x1a, r24	; 26
  bc:	08 95       	ret
  be:	2a b3       	in	r18, 0x1a	; 26
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	02 c0       	rjmp	.+4      	; 0xca <GPIO_voidSetPinDDR+0x38>
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	6a 95       	dec	r22
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <GPIO_voidSetPinDDR+0x34>
  ce:	80 95       	com	r24
  d0:	82 23       	and	r24, r18
  d2:	8a bb       	out	0x1a, r24	; 26
  d4:	08 95       	ret
  d6:	41 30       	cpi	r20, 0x01	; 1
  d8:	59 f4       	brne	.+22     	; 0xf0 <GPIO_voidSetPinDDR+0x5e>
  da:	27 b3       	in	r18, 0x17	; 23
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_voidSetPinDDR+0x54>
  e2:	88 0f       	add	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_voidSetPinDDR+0x50>
  ea:	82 2b       	or	r24, r18
  ec:	87 bb       	out	0x17, r24	; 23
  ee:	08 95       	ret
  f0:	27 b3       	in	r18, 0x17	; 23
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <GPIO_voidSetPinDDR+0x6a>
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	6a 95       	dec	r22
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <GPIO_voidSetPinDDR+0x66>
 100:	80 95       	com	r24
 102:	82 23       	and	r24, r18
 104:	87 bb       	out	0x17, r24	; 23
 106:	08 95       	ret
 108:	41 30       	cpi	r20, 0x01	; 1
 10a:	59 f4       	brne	.+22     	; 0x122 <GPIO_voidSetPinDDR+0x90>
 10c:	24 b3       	in	r18, 0x14	; 20
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <GPIO_voidSetPinDDR+0x86>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <GPIO_voidSetPinDDR+0x82>
 11c:	82 2b       	or	r24, r18
 11e:	84 bb       	out	0x14, r24	; 20
 120:	08 95       	ret
 122:	24 b3       	in	r18, 0x14	; 20
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <GPIO_voidSetPinDDR+0x9c>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <GPIO_voidSetPinDDR+0x98>
 132:	80 95       	com	r24
 134:	82 23       	and	r24, r18
 136:	84 bb       	out	0x14, r24	; 20
 138:	08 95       	ret
 13a:	41 30       	cpi	r20, 0x01	; 1
 13c:	59 f4       	brne	.+22     	; 0x154 <GPIO_voidSetPinDDR+0xc2>
 13e:	21 b3       	in	r18, 0x11	; 17
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <GPIO_voidSetPinDDR+0xb8>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <GPIO_voidSetPinDDR+0xb4>
 14e:	82 2b       	or	r24, r18
 150:	81 bb       	out	0x11, r24	; 17
 152:	08 95       	ret
 154:	21 b3       	in	r18, 0x11	; 17
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	02 c0       	rjmp	.+4      	; 0x160 <GPIO_voidSetPinDDR+0xce>
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	6a 95       	dec	r22
 162:	e2 f7       	brpl	.-8      	; 0x15c <GPIO_voidSetPinDDR+0xca>
 164:	80 95       	com	r24
 166:	82 23       	and	r24, r18
 168:	81 bb       	out	0x11, r24	; 17
 16a:	08 95       	ret

0000016c <GPIO_voidWritePin>:
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	01 f1       	breq	.+64     	; 0x1b0 <GPIO_voidWritePin+0x44>
 170:	30 f0       	brcs	.+12     	; 0x17e <GPIO_voidWritePin+0x12>
 172:	82 30       	cpi	r24, 0x02	; 2
 174:	b1 f1       	breq	.+108    	; 0x1e2 <GPIO_voidWritePin+0x76>
 176:	83 30       	cpi	r24, 0x03	; 3
 178:	09 f4       	brne	.+2      	; 0x17c <GPIO_voidWritePin+0x10>
 17a:	4c c0       	rjmp	.+152    	; 0x214 <GPIO_voidWritePin+0xa8>
 17c:	08 95       	ret
 17e:	41 30       	cpi	r20, 0x01	; 1
 180:	59 f4       	brne	.+22     	; 0x198 <GPIO_voidWritePin+0x2c>
 182:	2b b3       	in	r18, 0x1b	; 27
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	02 c0       	rjmp	.+4      	; 0x18e <GPIO_voidWritePin+0x22>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	6a 95       	dec	r22
 190:	e2 f7       	brpl	.-8      	; 0x18a <GPIO_voidWritePin+0x1e>
 192:	82 2b       	or	r24, r18
 194:	8b bb       	out	0x1b, r24	; 27
 196:	08 95       	ret
 198:	2b b3       	in	r18, 0x1b	; 27
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <GPIO_voidWritePin+0x38>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	6a 95       	dec	r22
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <GPIO_voidWritePin+0x34>
 1a8:	80 95       	com	r24
 1aa:	82 23       	and	r24, r18
 1ac:	8b bb       	out	0x1b, r24	; 27
 1ae:	08 95       	ret
 1b0:	41 30       	cpi	r20, 0x01	; 1
 1b2:	59 f4       	brne	.+22     	; 0x1ca <GPIO_voidWritePin+0x5e>
 1b4:	28 b3       	in	r18, 0x18	; 24
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <GPIO_voidWritePin+0x54>
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	6a 95       	dec	r22
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <GPIO_voidWritePin+0x50>
 1c4:	82 2b       	or	r24, r18
 1c6:	88 bb       	out	0x18, r24	; 24
 1c8:	08 95       	ret
 1ca:	28 b3       	in	r18, 0x18	; 24
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <GPIO_voidWritePin+0x6a>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <GPIO_voidWritePin+0x66>
 1da:	80 95       	com	r24
 1dc:	82 23       	and	r24, r18
 1de:	88 bb       	out	0x18, r24	; 24
 1e0:	08 95       	ret
 1e2:	41 30       	cpi	r20, 0x01	; 1
 1e4:	59 f4       	brne	.+22     	; 0x1fc <GPIO_voidWritePin+0x90>
 1e6:	25 b3       	in	r18, 0x15	; 21
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <GPIO_voidWritePin+0x86>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	6a 95       	dec	r22
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <GPIO_voidWritePin+0x82>
 1f6:	82 2b       	or	r24, r18
 1f8:	85 bb       	out	0x15, r24	; 21
 1fa:	08 95       	ret
 1fc:	25 b3       	in	r18, 0x15	; 21
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <GPIO_voidWritePin+0x9c>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	6a 95       	dec	r22
 20a:	e2 f7       	brpl	.-8      	; 0x204 <GPIO_voidWritePin+0x98>
 20c:	80 95       	com	r24
 20e:	82 23       	and	r24, r18
 210:	85 bb       	out	0x15, r24	; 21
 212:	08 95       	ret
 214:	41 30       	cpi	r20, 0x01	; 1
 216:	59 f4       	brne	.+22     	; 0x22e <GPIO_voidWritePin+0xc2>
 218:	22 b3       	in	r18, 0x12	; 18
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	02 c0       	rjmp	.+4      	; 0x224 <GPIO_voidWritePin+0xb8>
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	6a 95       	dec	r22
 226:	e2 f7       	brpl	.-8      	; 0x220 <GPIO_voidWritePin+0xb4>
 228:	82 2b       	or	r24, r18
 22a:	82 bb       	out	0x12, r24	; 18
 22c:	08 95       	ret
 22e:	22 b3       	in	r18, 0x12	; 18
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	02 c0       	rjmp	.+4      	; 0x23a <GPIO_voidWritePin+0xce>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <GPIO_voidWritePin+0xca>
 23e:	80 95       	com	r24
 240:	82 23       	and	r24, r18
 242:	82 bb       	out	0x12, r24	; 18
 244:	08 95       	ret

00000246 <GPIO_voidSetPortDDR>:
		}
}

void GPIO_voidSetPortDDR(u8 copy_u8Port, u8 copy_u8Mode)
{
	switch(copy_u8Port)
 246:	81 30       	cpi	r24, 0x01	; 1
 248:	69 f0       	breq	.+26     	; 0x264 <GPIO_voidSetPortDDR+0x1e>
 24a:	28 f0       	brcs	.+10     	; 0x256 <GPIO_voidSetPortDDR+0x10>
 24c:	82 30       	cpi	r24, 0x02	; 2
 24e:	89 f0       	breq	.+34     	; 0x272 <GPIO_voidSetPortDDR+0x2c>
 250:	83 30       	cpi	r24, 0x03	; 3
 252:	b1 f0       	breq	.+44     	; 0x280 <GPIO_voidSetPortDDR+0x3a>
 254:	08 95       	ret
	{
		case GPIOA :  
			if(copy_u8Mode == OUTPUT)
 256:	61 30       	cpi	r22, 0x01	; 1
 258:	19 f4       	brne	.+6      	; 0x260 <GPIO_voidSetPortDDR+0x1a>
			{
				DDRA = 0xff;
 25a:	8f ef       	ldi	r24, 0xFF	; 255
 25c:	8a bb       	out	0x1a, r24	; 26
 25e:	08 95       	ret
			}
			else
			{
				DDRA = 0x00;
 260:	1a ba       	out	0x1a, r1	; 26
 262:	08 95       	ret
			}
			break;
		case GPIOB :  
			if(copy_u8Mode == OUTPUT)
 264:	61 30       	cpi	r22, 0x01	; 1
 266:	19 f4       	brne	.+6      	; 0x26e <GPIO_voidSetPortDDR+0x28>
			{
				DDRB = 0xff;
 268:	8f ef       	ldi	r24, 0xFF	; 255
 26a:	87 bb       	out	0x17, r24	; 23
 26c:	08 95       	ret
			}
			else
			{
				DDRB = 0x00;
 26e:	17 ba       	out	0x17, r1	; 23
 270:	08 95       	ret
			}
			break;
		case GPIOC :  
			if(copy_u8Mode == OUTPUT)
 272:	61 30       	cpi	r22, 0x01	; 1
 274:	19 f4       	brne	.+6      	; 0x27c <GPIO_voidSetPortDDR+0x36>
			{
				DDRC = 0xff;
 276:	8f ef       	ldi	r24, 0xFF	; 255
 278:	84 bb       	out	0x14, r24	; 20
 27a:	08 95       	ret
			}
			else
			{
				DDRC = 0x00;
 27c:	14 ba       	out	0x14, r1	; 20
 27e:	08 95       	ret
			}
			break;
		case GPIOD :  
			if(copy_u8Mode == OUTPUT)
 280:	61 30       	cpi	r22, 0x01	; 1
 282:	19 f4       	brne	.+6      	; 0x28a <GPIO_voidSetPortDDR+0x44>
			{
				DDRD = 0xff;
 284:	8f ef       	ldi	r24, 0xFF	; 255
 286:	81 bb       	out	0x11, r24	; 17
 288:	08 95       	ret
			}
			else
			{
				DDRD = 0x00;
 28a:	11 ba       	out	0x11, r1	; 17
 28c:	08 95       	ret

0000028e <GPIO_voidWritePort>:
	}
}

void GPIO_voidWritePort(u8 copy_u8Port , u8 copy_u8Value)
{
	switch (copy_u8Port)
 28e:	81 30       	cpi	r24, 0x01	; 1
 290:	41 f0       	breq	.+16     	; 0x2a2 <GPIO_voidWritePort+0x14>
 292:	28 f0       	brcs	.+10     	; 0x29e <GPIO_voidWritePort+0x10>
 294:	82 30       	cpi	r24, 0x02	; 2
 296:	39 f0       	breq	.+14     	; 0x2a6 <GPIO_voidWritePort+0x18>
 298:	83 30       	cpi	r24, 0x03	; 3
 29a:	39 f0       	breq	.+14     	; 0x2aa <GPIO_voidWritePort+0x1c>
 29c:	08 95       	ret
	{
		case GPIOA :  PORTA = copy_u8Value;
 29e:	6b bb       	out	0x1b, r22	; 27
					  break;
 2a0:	08 95       	ret
		case GPIOB :  PORTB = copy_u8Value;
 2a2:	68 bb       	out	0x18, r22	; 24
					  break;
 2a4:	08 95       	ret
		case GPIOC :  PORTC = copy_u8Value;
 2a6:	65 bb       	out	0x15, r22	; 21
					  break;
 2a8:	08 95       	ret
		case GPIOD :  PORTD = copy_u8Value;
 2aa:	62 bb       	out	0x12, r22	; 18
 2ac:	08 95       	ret

000002ae <LCD_voidSendEnPulse>:
		#endif
	#endif
}
static void LCD_voidSendEnPulse()
{
	GPIO_voidWritePin(LCD_ENPORT,LCD_ENPIN,1);
 2ae:	41 e0       	ldi	r20, 0x01	; 1
 2b0:	60 e0       	ldi	r22, 0x00	; 0
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	0e 94 b6 00 	call	0x16c	; 0x16c <GPIO_voidWritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b8:	8f e9       	ldi	r24, 0x9F	; 159
 2ba:	9f e0       	ldi	r25, 0x0F	; 15
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <LCD_voidSendEnPulse+0xe>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <LCD_voidSendEnPulse+0x14>
 2c2:	00 00       	nop
	_delay_ms(2);
	GPIO_voidWritePin(LCD_ENPORT,LCD_ENPIN,0);
 2c4:	40 e0       	ldi	r20, 0x00	; 0
 2c6:	60 e0       	ldi	r22, 0x00	; 0
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	0e 94 b6 00 	call	0x16c	; 0x16c <GPIO_voidWritePin>
 2ce:	08 95       	ret

000002d0 <LCD_voidSendCmd>:
	#endif
}
void LCD_voidSendCmd(u8 copy_u8cmd)
{
	#if    LCD_MODE == 0
		GPIO_voidWritePort(LCD_PORT,copy_u8cmd);
 2d0:	68 2f       	mov	r22, r24
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	0e 94 47 01 	call	0x28e	; 0x28e <GPIO_voidWritePort>
		GPIO_voidWritePin(LCD_RSPORT,LCD_RSPIN,0);
 2d8:	40 e0       	ldi	r20, 0x00	; 0
 2da:	61 e0       	ldi	r22, 0x01	; 1
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	0e 94 b6 00 	call	0x16c	; 0x16c <GPIO_voidWritePin>
		GPIO_voidWritePin(LCD_RWPORT,LCD_RWPIN,0);
 2e2:	40 e0       	ldi	r20, 0x00	; 0
 2e4:	62 e0       	ldi	r22, 0x02	; 2
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	0e 94 b6 00 	call	0x16c	; 0x16c <GPIO_voidWritePin>
		LCD_voidSendEnPulse();
 2ec:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCD_voidSendEnPulse>
 2f0:	08 95       	ret

000002f2 <LCD_voidInit>:
 2f2:	2f ef       	ldi	r18, 0xFF	; 255
 2f4:	81 ee       	ldi	r24, 0xE1	; 225
 2f6:	94 e0       	ldi	r25, 0x04	; 4
 2f8:	21 50       	subi	r18, 0x01	; 1
 2fa:	80 40       	sbci	r24, 0x00	; 0
 2fc:	90 40       	sbci	r25, 0x00	; 0
 2fe:	e1 f7       	brne	.-8      	; 0x2f8 <LCD_voidInit+0x6>
 300:	00 c0       	rjmp	.+0      	; 0x302 <LCD_voidInit+0x10>
 302:	00 00       	nop


void LCD_voidInit()
{
	_delay_ms(200);
	GPIO_voidSetPinDDR(LCD_RSPORT, LCD_RSPIN, OUTPUT);
 304:	41 e0       	ldi	r20, 0x01	; 1
 306:	61 e0       	ldi	r22, 0x01	; 1
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_voidSetPinDDR>
	GPIO_voidSetPinDDR(LCD_RWPORT, LCD_RWPIN, OUTPUT);
 30e:	41 e0       	ldi	r20, 0x01	; 1
 310:	62 e0       	ldi	r22, 0x02	; 2
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_voidSetPinDDR>
	GPIO_voidSetPinDDR(LCD_ENPORT, LCD_ENPIN, OUTPUT);
 318:	41 e0       	ldi	r20, 0x01	; 1
 31a:	60 e0       	ldi	r22, 0x00	; 0
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_voidSetPinDDR>
	#if    LCD_MODE == 0
		GPIO_voidSetPortDDR(LCD_PORT, OUTPUT);
 322:	61 e0       	ldi	r22, 0x01	; 1
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	0e 94 23 01 	call	0x246	; 0x246 <GPIO_voidSetPortDDR>
		LCD_voidSendCmd(LCD_Function_8BIT_2Lines);
 32a:	88 e3       	ldi	r24, 0x38	; 56
 32c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_voidSendCmd>
 330:	8f ec       	ldi	r24, 0xCF	; 207
 332:	97 e0       	ldi	r25, 0x07	; 7
 334:	01 97       	sbiw	r24, 0x01	; 1
 336:	f1 f7       	brne	.-4      	; 0x334 <LCD_voidInit+0x42>
 338:	00 c0       	rjmp	.+0      	; 0x33a <LCD_voidInit+0x48>
 33a:	00 00       	nop
		_delay_ms(1);
		LCD_voidSendCmd(LCD_DISP_ON_CURSOR_ON);
 33c:	8e e0       	ldi	r24, 0x0E	; 14
 33e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_voidSendCmd>
 342:	8f ec       	ldi	r24, 0xCF	; 207
 344:	97 e0       	ldi	r25, 0x07	; 7
 346:	01 97       	sbiw	r24, 0x01	; 1
 348:	f1 f7       	brne	.-4      	; 0x346 <LCD_voidInit+0x54>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <LCD_voidInit+0x5a>
 34c:	00 00       	nop
		_delay_ms(1);
		LCD_voidSendCmd(LCD_CLEAR_SCREEN);
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_voidSendCmd>
 354:	8f e1       	ldi	r24, 0x1F	; 31
 356:	9e e4       	ldi	r25, 0x4E	; 78
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <LCD_voidInit+0x66>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <LCD_voidInit+0x6c>
 35e:	00 00       	nop
		_delay_ms(10);
		LCD_voidSendCmd(LCD_ENTRY_MODE);
 360:	86 e0       	ldi	r24, 0x06	; 6
 362:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_voidSendCmd>
 366:	8f ec       	ldi	r24, 0xCF	; 207
 368:	97 e0       	ldi	r25, 0x07	; 7
 36a:	01 97       	sbiw	r24, 0x01	; 1
 36c:	f1 f7       	brne	.-4      	; 0x36a <LCD_voidInit+0x78>
 36e:	00 c0       	rjmp	.+0      	; 0x370 <LCD_voidInit+0x7e>
 370:	00 00       	nop
 372:	08 95       	ret

00000374 <LCD_voidMoveCursor>:
	GPIO_voidWritePin(LCD_ENPORT,LCD_ENPIN,0);
}
void LCD_voidMoveCursor(u8 copy_u8Line, u8 copy_u8Position)
{
	u8 data;
	if(copy_u8Line < 1 || copy_u8Line > 2 || copy_u8Position < 1 ||copy_u8Position > 16)
 374:	9f ef       	ldi	r25, 0xFF	; 255
 376:	98 0f       	add	r25, r24
 378:	92 30       	cpi	r25, 0x02	; 2
 37a:	70 f4       	brcc	.+28     	; 0x398 <LCD_voidMoveCursor+0x24>
 37c:	66 23       	and	r22, r22
 37e:	71 f0       	breq	.+28     	; 0x39c <LCD_voidMoveCursor+0x28>
 380:	61 31       	cpi	r22, 0x11	; 17
 382:	70 f4       	brcc	.+28     	; 0x3a0 <LCD_voidMoveCursor+0x2c>
	{
		data = 0x80;
	}
	else if(copy_u8Line == 1)
 384:	81 30       	cpi	r24, 0x01	; 1
 386:	19 f4       	brne	.+6      	; 0x38e <LCD_voidMoveCursor+0x1a>
	{
		data = 0x80 +(copy_u8Position - 1);
 388:	2f e7       	ldi	r18, 0x7F	; 127
 38a:	26 0f       	add	r18, r22
 38c:	0a c0       	rjmp	.+20     	; 0x3a2 <LCD_voidMoveCursor+0x2e>
	}
	else if(copy_u8Line == 2)
 38e:	82 30       	cpi	r24, 0x02	; 2
 390:	41 f4       	brne	.+16     	; 0x3a2 <LCD_voidMoveCursor+0x2e>
	{
		data = 0xC0 +(copy_u8Position - 1);
 392:	2f eb       	ldi	r18, 0xBF	; 191
 394:	26 0f       	add	r18, r22
 396:	05 c0       	rjmp	.+10     	; 0x3a2 <LCD_voidMoveCursor+0x2e>
void LCD_voidMoveCursor(u8 copy_u8Line, u8 copy_u8Position)
{
	u8 data;
	if(copy_u8Line < 1 || copy_u8Line > 2 || copy_u8Position < 1 ||copy_u8Position > 16)
	{
		data = 0x80;
 398:	20 e8       	ldi	r18, 0x80	; 128
 39a:	03 c0       	rjmp	.+6      	; 0x3a2 <LCD_voidMoveCursor+0x2e>
 39c:	20 e8       	ldi	r18, 0x80	; 128
 39e:	01 c0       	rjmp	.+2      	; 0x3a2 <LCD_voidMoveCursor+0x2e>
 3a0:	20 e8       	ldi	r18, 0x80	; 128
	}
	else if(copy_u8Line == 2)
	{
		data = 0xC0 +(copy_u8Position - 1);
	}
	LCD_voidSendCmd(data);
 3a2:	82 2f       	mov	r24, r18
 3a4:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_voidSendCmd>
 3a8:	8f ec       	ldi	r24, 0xCF	; 207
 3aa:	97 e0       	ldi	r25, 0x07	; 7
 3ac:	01 97       	sbiw	r24, 0x01	; 1
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <LCD_voidMoveCursor+0x38>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <LCD_voidMoveCursor+0x3e>
 3b2:	00 00       	nop
 3b4:	08 95       	ret

000003b6 <LCD_voidClearScreen>:
	_delay_ms(1);
}
void LCD_voidClearScreen()
{
	LCD_voidSendCmd(LCD_CLEAR_SCREEN);
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_voidSendCmd>
 3bc:	8f e1       	ldi	r24, 0x1F	; 31
 3be:	9e e4       	ldi	r25, 0x4E	; 78
 3c0:	01 97       	sbiw	r24, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <LCD_voidClearScreen+0xa>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <LCD_voidClearScreen+0x10>
 3c6:	00 00       	nop
 3c8:	08 95       	ret

000003ca <LCD_voidDisplayChar>:
	_delay_ms(10);
}
void LCD_voidDisplayChar(u8 copy_u8Char)
{
	#if    LCD_MODE == 0
		GPIO_voidWritePort(LCD_PORT,copy_u8Char);
 3ca:	68 2f       	mov	r22, r24
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	0e 94 47 01 	call	0x28e	; 0x28e <GPIO_voidWritePort>
		GPIO_voidWritePin(LCD_RSPORT,LCD_RSPIN,1);
 3d2:	41 e0       	ldi	r20, 0x01	; 1
 3d4:	61 e0       	ldi	r22, 0x01	; 1
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	0e 94 b6 00 	call	0x16c	; 0x16c <GPIO_voidWritePin>
		GPIO_voidWritePin(LCD_RWPORT,LCD_RWPIN,0);
 3dc:	40 e0       	ldi	r20, 0x00	; 0
 3de:	62 e0       	ldi	r22, 0x02	; 2
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	0e 94 b6 00 	call	0x16c	; 0x16c <GPIO_voidWritePin>
		LCD_voidSendEnPulse();
 3e6:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCD_voidSendEnPulse>
 3ea:	08 95       	ret

000003ec <LCD_voidDisplayString>:
			_delay_ms(2);
		#endif
	#endif
}
void LCD_voidDisplayString(u8 *copy_u8String)
{
 3ec:	cf 93       	push	r28
 3ee:	df 93       	push	r29
 3f0:	ec 01       	movw	r28, r24
	while((*copy_u8String)!= '\0')
 3f2:	03 c0       	rjmp	.+6      	; 0x3fa <LCD_voidDisplayString+0xe>
	{
		LCD_voidDisplayChar(*copy_u8String);
 3f4:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_voidDisplayChar>
		copy_u8String++;
 3f8:	21 96       	adiw	r28, 0x01	; 1
		#endif
	#endif
}
void LCD_voidDisplayString(u8 *copy_u8String)
{
	while((*copy_u8String)!= '\0')
 3fa:	88 81       	ld	r24, Y
 3fc:	81 11       	cpse	r24, r1
 3fe:	fa cf       	rjmp	.-12     	; 0x3f4 <LCD_voidDisplayString+0x8>
	{
		LCD_voidDisplayChar(*copy_u8String);
		copy_u8String++;
	}
}
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	08 95       	ret

00000406 <LCD_voidDisplayNumber>:

void LCD_voidDisplayNumber(u32 copy_u32Number){
 406:	0f 93       	push	r16
 408:	1f 93       	push	r17
 40a:	cf 93       	push	r28
 40c:	df 93       	push	r29
 40e:	cd b7       	in	r28, 0x3d	; 61
 410:	de b7       	in	r29, 0x3e	; 62
 412:	27 97       	sbiw	r28, 0x07	; 7
 414:	0f b6       	in	r0, 0x3f	; 63
 416:	f8 94       	cli
 418:	de bf       	out	0x3e, r29	; 62
 41a:	0f be       	out	0x3f, r0	; 63
 41c:	cd bf       	out	0x3d, r28	; 61
	u8 str[7];
	sprintf(str,"%d",copy_u32Number);
 41e:	9f 93       	push	r25
 420:	8f 93       	push	r24
 422:	7f 93       	push	r23
 424:	6f 93       	push	r22
 426:	83 e6       	ldi	r24, 0x63	; 99
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	9f 93       	push	r25
 42c:	8f 93       	push	r24
 42e:	8e 01       	movw	r16, r28
 430:	0f 5f       	subi	r16, 0xFF	; 255
 432:	1f 4f       	sbci	r17, 0xFF	; 255
 434:	1f 93       	push	r17
 436:	0f 93       	push	r16
 438:	0e 94 9b 03 	call	0x736	; 0x736 <sprintf>
	LCD_voidDisplayString(str);
 43c:	c8 01       	movw	r24, r16
 43e:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LCD_voidDisplayString>
}
 442:	0f b6       	in	r0, 0x3f	; 63
 444:	f8 94       	cli
 446:	de bf       	out	0x3e, r29	; 62
 448:	0f be       	out	0x3f, r0	; 63
 44a:	cd bf       	out	0x3d, r28	; 61
 44c:	27 96       	adiw	r28, 0x07	; 7
 44e:	0f b6       	in	r0, 0x3f	; 63
 450:	f8 94       	cli
 452:	de bf       	out	0x3e, r29	; 62
 454:	0f be       	out	0x3f, r0	; 63
 456:	cd bf       	out	0x3d, r28	; 61
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	1f 91       	pop	r17
 45e:	0f 91       	pop	r16
 460:	08 95       	ret

00000462 <LED_voidTurnOn>:
#include "LED_interface.h"
#include "LED_config.h"
#include "LED_private.h"

void LED_voidTurnOn(u8 copy_u8Port, u8 copy_u8Pin)
{
 462:	cf 93       	push	r28
 464:	df 93       	push	r29
 466:	c8 2f       	mov	r28, r24
 468:	d6 2f       	mov	r29, r22
	GPIO_voidSetPinDDR(copy_u8Port, copy_u8Pin, OUTPUT);
 46a:	41 e0       	ldi	r20, 0x01	; 1
 46c:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_voidSetPinDDR>
	GPIO_voidWritePin(copy_u8Port, copy_u8Pin, HIGH);
 470:	41 e0       	ldi	r20, 0x01	; 1
 472:	6d 2f       	mov	r22, r29
 474:	8c 2f       	mov	r24, r28
 476:	0e 94 b6 00 	call	0x16c	; 0x16c <GPIO_voidWritePin>
}
 47a:	df 91       	pop	r29
 47c:	cf 91       	pop	r28
 47e:	08 95       	ret

00000480 <LED_voidTurnOff>:

void LED_voidTurnOff(u8 copy_u8Port, u8 copy_u8Pin)
{
 480:	cf 93       	push	r28
 482:	df 93       	push	r29
 484:	c8 2f       	mov	r28, r24
 486:	d6 2f       	mov	r29, r22
	GPIO_voidSetPinDDR(copy_u8Port, copy_u8Pin, OUTPUT);
 488:	41 e0       	ldi	r20, 0x01	; 1
 48a:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_voidSetPinDDR>
	GPIO_voidWritePin(copy_u8Port, copy_u8Pin, LOW);
 48e:	40 e0       	ldi	r20, 0x00	; 0
 490:	6d 2f       	mov	r22, r29
 492:	8c 2f       	mov	r24, r28
 494:	0e 94 b6 00 	call	0x16c	; 0x16c <GPIO_voidWritePin>
	
}
 498:	df 91       	pop	r29
 49a:	cf 91       	pop	r28
 49c:	08 95       	ret

0000049e <fun>:
volatile u8 counter_yellow=5;
volatile u8 counter_red=7;

void fun(void)
{
	counter1++;
 49e:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__data_end>
 4a2:	8f 5f       	subi	r24, 0xFF	; 255
 4a4:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__data_end>
 4a8:	08 95       	ret

000004aa <main>:
}
int main(void)
{
    LCD_voidInit();
 4aa:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCD_voidInit>
	TMR0_voidInit();
 4ae:	0e 94 0a 03 	call	0x614	; 0x614 <TMR0_voidInit>
	TMR0_voidSetOCR0(80);
 4b2:	80 e5       	ldi	r24, 0x50	; 80
 4b4:	0e 94 2c 03 	call	0x658	; 0x658 <TMR0_voidSetOCR0>
	TMR0_voidSetCTCWithInterrupt(&fun);
 4b8:	8f e4       	ldi	r24, 0x4F	; 79
 4ba:	92 e0       	ldi	r25, 0x02	; 2
 4bc:	0e 94 2e 03 	call	0x65c	; 0x65c <TMR0_voidSetCTCWithInterrupt>
	TMR0_voidStart(TMR0_CLK_1024);
 4c0:	85 e0       	ldi	r24, 0x05	; 5
 4c2:	0e 94 23 03 	call	0x646	; 0x646 <TMR0_voidStart>
    while (1) 
    {
		counter_green=10;
 4c6:	8a e0       	ldi	r24, 0x0A	; 10
 4c8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <counter_green>
		counter_yellow=5;
 4cc:	85 e0       	ldi	r24, 0x05	; 5
 4ce:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <counter_yellow>
		counter_red=7;
 4d2:	87 e0       	ldi	r24, 0x07	; 7
 4d4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		LCD_voidClearScreen();
 4d8:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_voidClearScreen>
		LCD_voidDisplayString("Remaining 10 Sec");
 4dc:	82 e7       	ldi	r24, 0x72	; 114
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LCD_voidDisplayString>
		LED_voidTurnOn(GPIOD,0);
 4e4:	60 e0       	ldi	r22, 0x00	; 0
 4e6:	83 e0       	ldi	r24, 0x03	; 3
 4e8:	0e 94 31 02 	call	0x462	; 0x462 <LED_voidTurnOn>
		while(counter_green>0)
 4ec:	24 c0       	rjmp	.+72     	; 0x536 <main+0x8c>
		{
			if(counter1>=100)
 4ee:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__data_end>
 4f2:	84 36       	cpi	r24, 0x64	; 100
 4f4:	00 f1       	brcs	.+64     	; 0x536 <main+0x8c>
			{
				counter1=0;
 4f6:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__data_end>
				counter_green--;
 4fa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <counter_green>
 4fe:	81 50       	subi	r24, 0x01	; 1
 500:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <counter_green>
				LCD_voidMoveCursor(1,11);
 504:	6b e0       	ldi	r22, 0x0B	; 11
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	0e 94 ba 01 	call	0x374	; 0x374 <LCD_voidMoveCursor>
				LCD_voidDisplayChar(' ');
 50c:	80 e2       	ldi	r24, 0x20	; 32
 50e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_voidDisplayChar>
				LCD_voidDisplayChar((counter_green%10)+48);
 512:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <counter_green>
 516:	9d ec       	ldi	r25, 0xCD	; 205
 518:	89 9f       	mul	r24, r25
 51a:	91 2d       	mov	r25, r1
 51c:	11 24       	eor	r1, r1
 51e:	96 95       	lsr	r25
 520:	96 95       	lsr	r25
 522:	96 95       	lsr	r25
 524:	99 0f       	add	r25, r25
 526:	29 2f       	mov	r18, r25
 528:	22 0f       	add	r18, r18
 52a:	22 0f       	add	r18, r18
 52c:	92 0f       	add	r25, r18
 52e:	89 1b       	sub	r24, r25
 530:	80 5d       	subi	r24, 0xD0	; 208
 532:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_voidDisplayChar>
		counter_yellow=5;
		counter_red=7;
		LCD_voidClearScreen();
		LCD_voidDisplayString("Remaining 10 Sec");
		LED_voidTurnOn(GPIOD,0);
		while(counter_green>0)
 536:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <counter_green>
 53a:	81 11       	cpse	r24, r1
 53c:	d8 cf       	rjmp	.-80     	; 0x4ee <main+0x44>
 53e:	2f ef       	ldi	r18, 0xFF	; 255
 540:	84 e3       	ldi	r24, 0x34	; 52
 542:	9c e0       	ldi	r25, 0x0C	; 12
 544:	21 50       	subi	r18, 0x01	; 1
 546:	80 40       	sbci	r24, 0x00	; 0
 548:	90 40       	sbci	r25, 0x00	; 0
 54a:	e1 f7       	brne	.-8      	; 0x544 <main+0x9a>
 54c:	00 c0       	rjmp	.+0      	; 0x54e <main+0xa4>
 54e:	00 00       	nop
				LCD_voidDisplayChar(' ');
				LCD_voidDisplayChar((counter_green%10)+48);
			}
		}
		_delay_ms(500);
		LED_voidTurnOn(GPIOD,1);
 550:	61 e0       	ldi	r22, 0x01	; 1
 552:	83 e0       	ldi	r24, 0x03	; 3
 554:	0e 94 31 02 	call	0x462	; 0x462 <LED_voidTurnOn>
		LED_voidTurnOff(GPIOD,0);
 558:	60 e0       	ldi	r22, 0x00	; 0
 55a:	83 e0       	ldi	r24, 0x03	; 3
 55c:	0e 94 40 02 	call	0x480	; 0x480 <LED_voidTurnOff>
		LCD_voidClearScreen();
 560:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_voidClearScreen>
		LCD_voidDisplayString("Remaining  5 sec");
 564:	83 e8       	ldi	r24, 0x83	; 131
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LCD_voidDisplayString>
		while(counter_yellow>0)
 56c:	19 c0       	rjmp	.+50     	; 0x5a0 <main+0xf6>
		{
			if(counter1 >=100)
 56e:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__data_end>
 572:	84 36       	cpi	r24, 0x64	; 100
 574:	a8 f0       	brcs	.+42     	; 0x5a0 <main+0xf6>
			{
				counter1=0;
 576:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__data_end>
				counter_yellow--;
 57a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <counter_yellow>
 57e:	81 50       	subi	r24, 0x01	; 1
 580:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <counter_yellow>
				LCD_voidMoveCursor(1,11);
 584:	6b e0       	ldi	r22, 0x0B	; 11
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	0e 94 ba 01 	call	0x374	; 0x374 <LCD_voidMoveCursor>
				LCD_voidDisplayChar(' ');
 58c:	80 e2       	ldi	r24, 0x20	; 32
 58e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_voidDisplayChar>
				LCD_voidDisplayNumber((counter_yellow));
 592:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <counter_yellow>
 596:	70 e0       	ldi	r23, 0x00	; 0
 598:	80 e0       	ldi	r24, 0x00	; 0
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	0e 94 03 02 	call	0x406	; 0x406 <LCD_voidDisplayNumber>
		_delay_ms(500);
		LED_voidTurnOn(GPIOD,1);
		LED_voidTurnOff(GPIOD,0);
		LCD_voidClearScreen();
		LCD_voidDisplayString("Remaining  5 sec");
		while(counter_yellow>0)
 5a0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <counter_yellow>
 5a4:	81 11       	cpse	r24, r1
 5a6:	e3 cf       	rjmp	.-58     	; 0x56e <main+0xc4>
 5a8:	2f ef       	ldi	r18, 0xFF	; 255
 5aa:	84 e3       	ldi	r24, 0x34	; 52
 5ac:	9c e0       	ldi	r25, 0x0C	; 12
 5ae:	21 50       	subi	r18, 0x01	; 1
 5b0:	80 40       	sbci	r24, 0x00	; 0
 5b2:	90 40       	sbci	r25, 0x00	; 0
 5b4:	e1 f7       	brne	.-8      	; 0x5ae <main+0x104>
 5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <main+0x10e>
 5b8:	00 00       	nop
				LCD_voidDisplayChar(' ');
				LCD_voidDisplayNumber((counter_yellow));
			}
		}
		_delay_ms(500);
		LED_voidTurnOn(GPIOD,2);
 5ba:	62 e0       	ldi	r22, 0x02	; 2
 5bc:	83 e0       	ldi	r24, 0x03	; 3
 5be:	0e 94 31 02 	call	0x462	; 0x462 <LED_voidTurnOn>
		LED_voidTurnOff(GPIOD,1);
 5c2:	61 e0       	ldi	r22, 0x01	; 1
 5c4:	83 e0       	ldi	r24, 0x03	; 3
 5c6:	0e 94 40 02 	call	0x480	; 0x480 <LED_voidTurnOff>
		LCD_voidClearScreen();
 5ca:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_voidClearScreen>
		LCD_voidDisplayString("Remaining  7 Sec");
 5ce:	84 e9       	ldi	r24, 0x94	; 148
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LCD_voidDisplayString>
		while(counter_red>0)
 5d6:	19 c0       	rjmp	.+50     	; 0x60a <main+0x160>
		{
			if(counter1 >=100)
 5d8:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__data_end>
 5dc:	84 36       	cpi	r24, 0x64	; 100
 5de:	a8 f0       	brcs	.+42     	; 0x60a <main+0x160>
			{
				counter1=0;
 5e0:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__data_end>
				counter_red--;
 5e4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 5e8:	81 50       	subi	r24, 0x01	; 1
 5ea:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				LCD_voidMoveCursor(1,11);
 5ee:	6b e0       	ldi	r22, 0x0B	; 11
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	0e 94 ba 01 	call	0x374	; 0x374 <LCD_voidMoveCursor>
				LCD_voidDisplayChar(' ');
 5f6:	80 e2       	ldi	r24, 0x20	; 32
 5f8:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_voidDisplayChar>
				LCD_voidDisplayNumber((counter_red));
 5fc:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 600:	70 e0       	ldi	r23, 0x00	; 0
 602:	80 e0       	ldi	r24, 0x00	; 0
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	0e 94 03 02 	call	0x406	; 0x406 <LCD_voidDisplayNumber>
		_delay_ms(500);
		LED_voidTurnOn(GPIOD,2);
		LED_voidTurnOff(GPIOD,1);
		LCD_voidClearScreen();
		LCD_voidDisplayString("Remaining  7 Sec");
		while(counter_red>0)
 60a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 60e:	81 11       	cpse	r24, r1
 610:	e3 cf       	rjmp	.-58     	; 0x5d8 <main+0x12e>
 612:	59 cf       	rjmp	.-334    	; 0x4c6 <main+0x1c>

00000614 <TMR0_voidInit>:
		TMR0_voidSetOCR0(Local_u8Data);
	#elif TMR0_COM_PCPWM == 0x30
		Local_u8Data = 255-((255 * copy_u8DutyCycle)/100);
		TMR0_voidSetOCR0(Local_u8Data);
	#endif
}
 614:	8f b7       	in	r24, 0x3f	; 63
 616:	80 68       	ori	r24, 0x80	; 128
 618:	8f bf       	out	0x3f, r24	; 63
 61a:	83 b7       	in	r24, 0x33	; 51
 61c:	8f 7b       	andi	r24, 0xBF	; 191
 61e:	83 bf       	out	0x33, r24	; 51
 620:	83 b7       	in	r24, 0x33	; 51
 622:	88 60       	ori	r24, 0x08	; 8
 624:	83 bf       	out	0x33, r24	; 51
 626:	83 b7       	in	r24, 0x33	; 51
 628:	8f 7c       	andi	r24, 0xCF	; 207
 62a:	83 bf       	out	0x33, r24	; 51
 62c:	83 b7       	in	r24, 0x33	; 51
 62e:	80 63       	ori	r24, 0x30	; 48
 630:	83 bf       	out	0x33, r24	; 51
 632:	83 b7       	in	r24, 0x33	; 51
 634:	8f 77       	andi	r24, 0x7F	; 127
 636:	83 bf       	out	0x33, r24	; 51
 638:	89 b7       	in	r24, 0x39	; 57
 63a:	8e 7f       	andi	r24, 0xFE	; 254
 63c:	89 bf       	out	0x39, r24	; 57
 63e:	89 b7       	in	r24, 0x39	; 57
 640:	82 60       	ori	r24, 0x02	; 2
 642:	89 bf       	out	0x39, r24	; 57
 644:	08 95       	ret

00000646 <TMR0_voidStart>:
 646:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <flag>
 64a:	93 b7       	in	r25, 0x33	; 51
 64c:	98 7f       	andi	r25, 0xF8	; 248
 64e:	93 bf       	out	0x33, r25	; 51
 650:	93 b7       	in	r25, 0x33	; 51
 652:	89 2b       	or	r24, r25
 654:	83 bf       	out	0x33, r24	; 51
 656:	08 95       	ret

00000658 <TMR0_voidSetOCR0>:
 658:	8c bf       	out	0x3c, r24	; 60
 65a:	08 95       	ret

0000065c <TMR0_voidSetCTCWithInterrupt>:
 65c:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <Global_CBCTC+0x1>
 660:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <Global_CBCTC>
 664:	08 95       	ret

00000666 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
 666:	1f 92       	push	r1
 668:	0f 92       	push	r0
 66a:	0f b6       	in	r0, 0x3f	; 63
 66c:	0f 92       	push	r0
 66e:	11 24       	eor	r1, r1
 670:	2f 93       	push	r18
 672:	3f 93       	push	r19
 674:	4f 93       	push	r20
 676:	5f 93       	push	r21
 678:	6f 93       	push	r22
 67a:	7f 93       	push	r23
 67c:	8f 93       	push	r24
 67e:	9f 93       	push	r25
 680:	af 93       	push	r26
 682:	bf 93       	push	r27
 684:	ef 93       	push	r30
 686:	ff 93       	push	r31
	TOV_Counter++;
 688:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <TOV_Counter>
 68c:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <TOV_Counter+0x1>
 690:	a0 91 a9 00 	lds	r26, 0x00A9	; 0x8000a9 <TOV_Counter+0x2>
 694:	b0 91 aa 00 	lds	r27, 0x00AA	; 0x8000aa <TOV_Counter+0x3>
 698:	01 96       	adiw	r24, 0x01	; 1
 69a:	a1 1d       	adc	r26, r1
 69c:	b1 1d       	adc	r27, r1
 69e:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <TOV_Counter>
 6a2:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <TOV_Counter+0x1>
 6a6:	a0 93 a9 00 	sts	0x00A9, r26	; 0x8000a9 <TOV_Counter+0x2>
 6aa:	b0 93 aa 00 	sts	0x00AA, r27	; 0x8000aa <TOV_Counter+0x3>
	if(flag !=0)
 6ae:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <flag>
 6b2:	88 23       	and	r24, r24
 6b4:	29 f0       	breq	.+10     	; 0x6c0 <__vector_11+0x5a>
	{
		(*Global_CBTOV)();
 6b6:	e0 91 ae 00 	lds	r30, 0x00AE	; 0x8000ae <Global_CBTOV>
 6ba:	f0 91 af 00 	lds	r31, 0x00AF	; 0x8000af <Global_CBTOV+0x1>
 6be:	09 95       	icall
	}
}
 6c0:	ff 91       	pop	r31
 6c2:	ef 91       	pop	r30
 6c4:	bf 91       	pop	r27
 6c6:	af 91       	pop	r26
 6c8:	9f 91       	pop	r25
 6ca:	8f 91       	pop	r24
 6cc:	7f 91       	pop	r23
 6ce:	6f 91       	pop	r22
 6d0:	5f 91       	pop	r21
 6d2:	4f 91       	pop	r20
 6d4:	3f 91       	pop	r19
 6d6:	2f 91       	pop	r18
 6d8:	0f 90       	pop	r0
 6da:	0f be       	out	0x3f, r0	; 63
 6dc:	0f 90       	pop	r0
 6de:	1f 90       	pop	r1
 6e0:	18 95       	reti

000006e2 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 6e2:	1f 92       	push	r1
 6e4:	0f 92       	push	r0
 6e6:	0f b6       	in	r0, 0x3f	; 63
 6e8:	0f 92       	push	r0
 6ea:	11 24       	eor	r1, r1
 6ec:	2f 93       	push	r18
 6ee:	3f 93       	push	r19
 6f0:	4f 93       	push	r20
 6f2:	5f 93       	push	r21
 6f4:	6f 93       	push	r22
 6f6:	7f 93       	push	r23
 6f8:	8f 93       	push	r24
 6fa:	9f 93       	push	r25
 6fc:	af 93       	push	r26
 6fe:	bf 93       	push	r27
 700:	ef 93       	push	r30
 702:	ff 93       	push	r31
	(*Global_CBCTC)();
 704:	e0 91 ac 00 	lds	r30, 0x00AC	; 0x8000ac <Global_CBCTC>
 708:	f0 91 ad 00 	lds	r31, 0x00AD	; 0x8000ad <Global_CBCTC+0x1>
 70c:	09 95       	icall
	SET_BIT(TIFR,OCF0);
 70e:	88 b7       	in	r24, 0x38	; 56
 710:	82 60       	ori	r24, 0x02	; 2
 712:	88 bf       	out	0x38, r24	; 56
}
 714:	ff 91       	pop	r31
 716:	ef 91       	pop	r30
 718:	bf 91       	pop	r27
 71a:	af 91       	pop	r26
 71c:	9f 91       	pop	r25
 71e:	8f 91       	pop	r24
 720:	7f 91       	pop	r23
 722:	6f 91       	pop	r22
 724:	5f 91       	pop	r21
 726:	4f 91       	pop	r20
 728:	3f 91       	pop	r19
 72a:	2f 91       	pop	r18
 72c:	0f 90       	pop	r0
 72e:	0f be       	out	0x3f, r0	; 63
 730:	0f 90       	pop	r0
 732:	1f 90       	pop	r1
 734:	18 95       	reti

00000736 <sprintf>:
 736:	ae e0       	ldi	r26, 0x0E	; 14
 738:	b0 e0       	ldi	r27, 0x00	; 0
 73a:	e1 ea       	ldi	r30, 0xA1	; 161
 73c:	f3 e0       	ldi	r31, 0x03	; 3
 73e:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__prologue_saves__+0x1c>
 742:	0d 89       	ldd	r16, Y+21	; 0x15
 744:	1e 89       	ldd	r17, Y+22	; 0x16
 746:	86 e0       	ldi	r24, 0x06	; 6
 748:	8c 83       	std	Y+4, r24	; 0x04
 74a:	1a 83       	std	Y+2, r17	; 0x02
 74c:	09 83       	std	Y+1, r16	; 0x01
 74e:	8f ef       	ldi	r24, 0xFF	; 255
 750:	9f e7       	ldi	r25, 0x7F	; 127
 752:	9e 83       	std	Y+6, r25	; 0x06
 754:	8d 83       	std	Y+5, r24	; 0x05
 756:	ae 01       	movw	r20, r28
 758:	47 5e       	subi	r20, 0xE7	; 231
 75a:	5f 4f       	sbci	r21, 0xFF	; 255
 75c:	6f 89       	ldd	r22, Y+23	; 0x17
 75e:	78 8d       	ldd	r23, Y+24	; 0x18
 760:	ce 01       	movw	r24, r28
 762:	01 96       	adiw	r24, 0x01	; 1
 764:	0e 94 bd 03 	call	0x77a	; 0x77a <vfprintf>
 768:	ef 81       	ldd	r30, Y+7	; 0x07
 76a:	f8 85       	ldd	r31, Y+8	; 0x08
 76c:	e0 0f       	add	r30, r16
 76e:	f1 1f       	adc	r31, r17
 770:	10 82       	st	Z, r1
 772:	2e 96       	adiw	r28, 0x0e	; 14
 774:	e4 e0       	ldi	r30, 0x04	; 4
 776:	0c 94 78 06 	jmp	0xcf0	; 0xcf0 <__epilogue_restores__+0x1c>

0000077a <vfprintf>:
 77a:	ab e0       	ldi	r26, 0x0B	; 11
 77c:	b0 e0       	ldi	r27, 0x00	; 0
 77e:	e3 ec       	ldi	r30, 0xC3	; 195
 780:	f3 e0       	ldi	r31, 0x03	; 3
 782:	0c 94 4e 06 	jmp	0xc9c	; 0xc9c <__prologue_saves__>
 786:	6c 01       	movw	r12, r24
 788:	7b 01       	movw	r14, r22
 78a:	8a 01       	movw	r16, r20
 78c:	fc 01       	movw	r30, r24
 78e:	17 82       	std	Z+7, r1	; 0x07
 790:	16 82       	std	Z+6, r1	; 0x06
 792:	83 81       	ldd	r24, Z+3	; 0x03
 794:	81 ff       	sbrs	r24, 1
 796:	cc c1       	rjmp	.+920    	; 0xb30 <__stack+0x2d1>
 798:	ce 01       	movw	r24, r28
 79a:	01 96       	adiw	r24, 0x01	; 1
 79c:	3c 01       	movw	r6, r24
 79e:	f6 01       	movw	r30, r12
 7a0:	93 81       	ldd	r25, Z+3	; 0x03
 7a2:	f7 01       	movw	r30, r14
 7a4:	93 fd       	sbrc	r25, 3
 7a6:	85 91       	lpm	r24, Z+
 7a8:	93 ff       	sbrs	r25, 3
 7aa:	81 91       	ld	r24, Z+
 7ac:	7f 01       	movw	r14, r30
 7ae:	88 23       	and	r24, r24
 7b0:	09 f4       	brne	.+2      	; 0x7b4 <vfprintf+0x3a>
 7b2:	ba c1       	rjmp	.+884    	; 0xb28 <__stack+0x2c9>
 7b4:	85 32       	cpi	r24, 0x25	; 37
 7b6:	39 f4       	brne	.+14     	; 0x7c6 <vfprintf+0x4c>
 7b8:	93 fd       	sbrc	r25, 3
 7ba:	85 91       	lpm	r24, Z+
 7bc:	93 ff       	sbrs	r25, 3
 7be:	81 91       	ld	r24, Z+
 7c0:	7f 01       	movw	r14, r30
 7c2:	85 32       	cpi	r24, 0x25	; 37
 7c4:	29 f4       	brne	.+10     	; 0x7d0 <vfprintf+0x56>
 7c6:	b6 01       	movw	r22, r12
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	0e 94 b4 05 	call	0xb68	; 0xb68 <fputc>
 7ce:	e7 cf       	rjmp	.-50     	; 0x79e <vfprintf+0x24>
 7d0:	91 2c       	mov	r9, r1
 7d2:	21 2c       	mov	r2, r1
 7d4:	31 2c       	mov	r3, r1
 7d6:	ff e1       	ldi	r31, 0x1F	; 31
 7d8:	f3 15       	cp	r31, r3
 7da:	d8 f0       	brcs	.+54     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 7dc:	8b 32       	cpi	r24, 0x2B	; 43
 7de:	79 f0       	breq	.+30     	; 0x7fe <vfprintf+0x84>
 7e0:	38 f4       	brcc	.+14     	; 0x7f0 <vfprintf+0x76>
 7e2:	80 32       	cpi	r24, 0x20	; 32
 7e4:	79 f0       	breq	.+30     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7e6:	83 32       	cpi	r24, 0x23	; 35
 7e8:	a1 f4       	brne	.+40     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 7ea:	23 2d       	mov	r18, r3
 7ec:	20 61       	ori	r18, 0x10	; 16
 7ee:	1d c0       	rjmp	.+58     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 7f0:	8d 32       	cpi	r24, 0x2D	; 45
 7f2:	61 f0       	breq	.+24     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7f4:	80 33       	cpi	r24, 0x30	; 48
 7f6:	69 f4       	brne	.+26     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 7f8:	23 2d       	mov	r18, r3
 7fa:	21 60       	ori	r18, 0x01	; 1
 7fc:	16 c0       	rjmp	.+44     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 7fe:	83 2d       	mov	r24, r3
 800:	82 60       	ori	r24, 0x02	; 2
 802:	38 2e       	mov	r3, r24
 804:	e3 2d       	mov	r30, r3
 806:	e4 60       	ori	r30, 0x04	; 4
 808:	3e 2e       	mov	r3, r30
 80a:	2a c0       	rjmp	.+84     	; 0x860 <__stack+0x1>
 80c:	f3 2d       	mov	r31, r3
 80e:	f8 60       	ori	r31, 0x08	; 8
 810:	1d c0       	rjmp	.+58     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 812:	37 fc       	sbrc	r3, 7
 814:	2d c0       	rjmp	.+90     	; 0x870 <__stack+0x11>
 816:	20 ed       	ldi	r18, 0xD0	; 208
 818:	28 0f       	add	r18, r24
 81a:	2a 30       	cpi	r18, 0x0A	; 10
 81c:	40 f0       	brcs	.+16     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 81e:	8e 32       	cpi	r24, 0x2E	; 46
 820:	b9 f4       	brne	.+46     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 822:	36 fc       	sbrc	r3, 6
 824:	81 c1       	rjmp	.+770    	; 0xb28 <__stack+0x2c9>
 826:	23 2d       	mov	r18, r3
 828:	20 64       	ori	r18, 0x40	; 64
 82a:	32 2e       	mov	r3, r18
 82c:	19 c0       	rjmp	.+50     	; 0x860 <__stack+0x1>
 82e:	36 fe       	sbrs	r3, 6
 830:	06 c0       	rjmp	.+12     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 832:	8a e0       	ldi	r24, 0x0A	; 10
 834:	98 9e       	mul	r9, r24
 836:	20 0d       	add	r18, r0
 838:	11 24       	eor	r1, r1
 83a:	92 2e       	mov	r9, r18
 83c:	11 c0       	rjmp	.+34     	; 0x860 <__stack+0x1>
 83e:	ea e0       	ldi	r30, 0x0A	; 10
 840:	2e 9e       	mul	r2, r30
 842:	20 0d       	add	r18, r0
 844:	11 24       	eor	r1, r1
 846:	22 2e       	mov	r2, r18
 848:	f3 2d       	mov	r31, r3
 84a:	f0 62       	ori	r31, 0x20	; 32
 84c:	3f 2e       	mov	r3, r31
 84e:	08 c0       	rjmp	.+16     	; 0x860 <__stack+0x1>
 850:	8c 36       	cpi	r24, 0x6C	; 108
 852:	21 f4       	brne	.+8      	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 854:	83 2d       	mov	r24, r3
 856:	80 68       	ori	r24, 0x80	; 128
 858:	38 2e       	mov	r3, r24
 85a:	02 c0       	rjmp	.+4      	; 0x860 <__stack+0x1>
 85c:	88 36       	cpi	r24, 0x68	; 104
 85e:	41 f4       	brne	.+16     	; 0x870 <__stack+0x11>
 860:	f7 01       	movw	r30, r14
 862:	93 fd       	sbrc	r25, 3
 864:	85 91       	lpm	r24, Z+
 866:	93 ff       	sbrs	r25, 3
 868:	81 91       	ld	r24, Z+
 86a:	7f 01       	movw	r14, r30
 86c:	81 11       	cpse	r24, r1
 86e:	b3 cf       	rjmp	.-154    	; 0x7d6 <vfprintf+0x5c>
 870:	98 2f       	mov	r25, r24
 872:	9f 7d       	andi	r25, 0xDF	; 223
 874:	95 54       	subi	r25, 0x45	; 69
 876:	93 30       	cpi	r25, 0x03	; 3
 878:	28 f4       	brcc	.+10     	; 0x884 <__stack+0x25>
 87a:	0c 5f       	subi	r16, 0xFC	; 252
 87c:	1f 4f       	sbci	r17, 0xFF	; 255
 87e:	9f e3       	ldi	r25, 0x3F	; 63
 880:	99 83       	std	Y+1, r25	; 0x01
 882:	0d c0       	rjmp	.+26     	; 0x89e <__stack+0x3f>
 884:	83 36       	cpi	r24, 0x63	; 99
 886:	31 f0       	breq	.+12     	; 0x894 <__stack+0x35>
 888:	83 37       	cpi	r24, 0x73	; 115
 88a:	71 f0       	breq	.+28     	; 0x8a8 <__stack+0x49>
 88c:	83 35       	cpi	r24, 0x53	; 83
 88e:	09 f0       	breq	.+2      	; 0x892 <__stack+0x33>
 890:	59 c0       	rjmp	.+178    	; 0x944 <__stack+0xe5>
 892:	21 c0       	rjmp	.+66     	; 0x8d6 <__stack+0x77>
 894:	f8 01       	movw	r30, r16
 896:	80 81       	ld	r24, Z
 898:	89 83       	std	Y+1, r24	; 0x01
 89a:	0e 5f       	subi	r16, 0xFE	; 254
 89c:	1f 4f       	sbci	r17, 0xFF	; 255
 89e:	88 24       	eor	r8, r8
 8a0:	83 94       	inc	r8
 8a2:	91 2c       	mov	r9, r1
 8a4:	53 01       	movw	r10, r6
 8a6:	13 c0       	rjmp	.+38     	; 0x8ce <__stack+0x6f>
 8a8:	28 01       	movw	r4, r16
 8aa:	f2 e0       	ldi	r31, 0x02	; 2
 8ac:	4f 0e       	add	r4, r31
 8ae:	51 1c       	adc	r5, r1
 8b0:	f8 01       	movw	r30, r16
 8b2:	a0 80       	ld	r10, Z
 8b4:	b1 80       	ldd	r11, Z+1	; 0x01
 8b6:	36 fe       	sbrs	r3, 6
 8b8:	03 c0       	rjmp	.+6      	; 0x8c0 <__stack+0x61>
 8ba:	69 2d       	mov	r22, r9
 8bc:	70 e0       	ldi	r23, 0x00	; 0
 8be:	02 c0       	rjmp	.+4      	; 0x8c4 <__stack+0x65>
 8c0:	6f ef       	ldi	r22, 0xFF	; 255
 8c2:	7f ef       	ldi	r23, 0xFF	; 255
 8c4:	c5 01       	movw	r24, r10
 8c6:	0e 94 a9 05 	call	0xb52	; 0xb52 <strnlen>
 8ca:	4c 01       	movw	r8, r24
 8cc:	82 01       	movw	r16, r4
 8ce:	f3 2d       	mov	r31, r3
 8d0:	ff 77       	andi	r31, 0x7F	; 127
 8d2:	3f 2e       	mov	r3, r31
 8d4:	16 c0       	rjmp	.+44     	; 0x902 <__stack+0xa3>
 8d6:	28 01       	movw	r4, r16
 8d8:	22 e0       	ldi	r18, 0x02	; 2
 8da:	42 0e       	add	r4, r18
 8dc:	51 1c       	adc	r5, r1
 8de:	f8 01       	movw	r30, r16
 8e0:	a0 80       	ld	r10, Z
 8e2:	b1 80       	ldd	r11, Z+1	; 0x01
 8e4:	36 fe       	sbrs	r3, 6
 8e6:	03 c0       	rjmp	.+6      	; 0x8ee <__stack+0x8f>
 8e8:	69 2d       	mov	r22, r9
 8ea:	70 e0       	ldi	r23, 0x00	; 0
 8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <__stack+0x93>
 8ee:	6f ef       	ldi	r22, 0xFF	; 255
 8f0:	7f ef       	ldi	r23, 0xFF	; 255
 8f2:	c5 01       	movw	r24, r10
 8f4:	0e 94 9e 05 	call	0xb3c	; 0xb3c <strnlen_P>
 8f8:	4c 01       	movw	r8, r24
 8fa:	f3 2d       	mov	r31, r3
 8fc:	f0 68       	ori	r31, 0x80	; 128
 8fe:	3f 2e       	mov	r3, r31
 900:	82 01       	movw	r16, r4
 902:	33 fc       	sbrc	r3, 3
 904:	1b c0       	rjmp	.+54     	; 0x93c <__stack+0xdd>
 906:	82 2d       	mov	r24, r2
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	88 16       	cp	r8, r24
 90c:	99 06       	cpc	r9, r25
 90e:	b0 f4       	brcc	.+44     	; 0x93c <__stack+0xdd>
 910:	b6 01       	movw	r22, r12
 912:	80 e2       	ldi	r24, 0x20	; 32
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	0e 94 b4 05 	call	0xb68	; 0xb68 <fputc>
 91a:	2a 94       	dec	r2
 91c:	f4 cf       	rjmp	.-24     	; 0x906 <__stack+0xa7>
 91e:	f5 01       	movw	r30, r10
 920:	37 fc       	sbrc	r3, 7
 922:	85 91       	lpm	r24, Z+
 924:	37 fe       	sbrs	r3, 7
 926:	81 91       	ld	r24, Z+
 928:	5f 01       	movw	r10, r30
 92a:	b6 01       	movw	r22, r12
 92c:	90 e0       	ldi	r25, 0x00	; 0
 92e:	0e 94 b4 05 	call	0xb68	; 0xb68 <fputc>
 932:	21 10       	cpse	r2, r1
 934:	2a 94       	dec	r2
 936:	21 e0       	ldi	r18, 0x01	; 1
 938:	82 1a       	sub	r8, r18
 93a:	91 08       	sbc	r9, r1
 93c:	81 14       	cp	r8, r1
 93e:	91 04       	cpc	r9, r1
 940:	71 f7       	brne	.-36     	; 0x91e <__stack+0xbf>
 942:	e8 c0       	rjmp	.+464    	; 0xb14 <__stack+0x2b5>
 944:	84 36       	cpi	r24, 0x64	; 100
 946:	11 f0       	breq	.+4      	; 0x94c <__stack+0xed>
 948:	89 36       	cpi	r24, 0x69	; 105
 94a:	41 f5       	brne	.+80     	; 0x99c <__stack+0x13d>
 94c:	f8 01       	movw	r30, r16
 94e:	37 fe       	sbrs	r3, 7
 950:	07 c0       	rjmp	.+14     	; 0x960 <__stack+0x101>
 952:	60 81       	ld	r22, Z
 954:	71 81       	ldd	r23, Z+1	; 0x01
 956:	82 81       	ldd	r24, Z+2	; 0x02
 958:	93 81       	ldd	r25, Z+3	; 0x03
 95a:	0c 5f       	subi	r16, 0xFC	; 252
 95c:	1f 4f       	sbci	r17, 0xFF	; 255
 95e:	08 c0       	rjmp	.+16     	; 0x970 <__stack+0x111>
 960:	60 81       	ld	r22, Z
 962:	71 81       	ldd	r23, Z+1	; 0x01
 964:	07 2e       	mov	r0, r23
 966:	00 0c       	add	r0, r0
 968:	88 0b       	sbc	r24, r24
 96a:	99 0b       	sbc	r25, r25
 96c:	0e 5f       	subi	r16, 0xFE	; 254
 96e:	1f 4f       	sbci	r17, 0xFF	; 255
 970:	f3 2d       	mov	r31, r3
 972:	ff 76       	andi	r31, 0x6F	; 111
 974:	3f 2e       	mov	r3, r31
 976:	97 ff       	sbrs	r25, 7
 978:	09 c0       	rjmp	.+18     	; 0x98c <__stack+0x12d>
 97a:	90 95       	com	r25
 97c:	80 95       	com	r24
 97e:	70 95       	com	r23
 980:	61 95       	neg	r22
 982:	7f 4f       	sbci	r23, 0xFF	; 255
 984:	8f 4f       	sbci	r24, 0xFF	; 255
 986:	9f 4f       	sbci	r25, 0xFF	; 255
 988:	f0 68       	ori	r31, 0x80	; 128
 98a:	3f 2e       	mov	r3, r31
 98c:	2a e0       	ldi	r18, 0x0A	; 10
 98e:	30 e0       	ldi	r19, 0x00	; 0
 990:	a3 01       	movw	r20, r6
 992:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__ultoa_invert>
 996:	88 2e       	mov	r8, r24
 998:	86 18       	sub	r8, r6
 99a:	45 c0       	rjmp	.+138    	; 0xa26 <__stack+0x1c7>
 99c:	85 37       	cpi	r24, 0x75	; 117
 99e:	31 f4       	brne	.+12     	; 0x9ac <__stack+0x14d>
 9a0:	23 2d       	mov	r18, r3
 9a2:	2f 7e       	andi	r18, 0xEF	; 239
 9a4:	b2 2e       	mov	r11, r18
 9a6:	2a e0       	ldi	r18, 0x0A	; 10
 9a8:	30 e0       	ldi	r19, 0x00	; 0
 9aa:	25 c0       	rjmp	.+74     	; 0x9f6 <__stack+0x197>
 9ac:	93 2d       	mov	r25, r3
 9ae:	99 7f       	andi	r25, 0xF9	; 249
 9b0:	b9 2e       	mov	r11, r25
 9b2:	8f 36       	cpi	r24, 0x6F	; 111
 9b4:	c1 f0       	breq	.+48     	; 0x9e6 <__stack+0x187>
 9b6:	18 f4       	brcc	.+6      	; 0x9be <__stack+0x15f>
 9b8:	88 35       	cpi	r24, 0x58	; 88
 9ba:	79 f0       	breq	.+30     	; 0x9da <__stack+0x17b>
 9bc:	b5 c0       	rjmp	.+362    	; 0xb28 <__stack+0x2c9>
 9be:	80 37       	cpi	r24, 0x70	; 112
 9c0:	19 f0       	breq	.+6      	; 0x9c8 <__stack+0x169>
 9c2:	88 37       	cpi	r24, 0x78	; 120
 9c4:	21 f0       	breq	.+8      	; 0x9ce <__stack+0x16f>
 9c6:	b0 c0       	rjmp	.+352    	; 0xb28 <__stack+0x2c9>
 9c8:	e9 2f       	mov	r30, r25
 9ca:	e0 61       	ori	r30, 0x10	; 16
 9cc:	be 2e       	mov	r11, r30
 9ce:	b4 fe       	sbrs	r11, 4
 9d0:	0d c0       	rjmp	.+26     	; 0x9ec <__stack+0x18d>
 9d2:	fb 2d       	mov	r31, r11
 9d4:	f4 60       	ori	r31, 0x04	; 4
 9d6:	bf 2e       	mov	r11, r31
 9d8:	09 c0       	rjmp	.+18     	; 0x9ec <__stack+0x18d>
 9da:	34 fe       	sbrs	r3, 4
 9dc:	0a c0       	rjmp	.+20     	; 0x9f2 <__stack+0x193>
 9de:	29 2f       	mov	r18, r25
 9e0:	26 60       	ori	r18, 0x06	; 6
 9e2:	b2 2e       	mov	r11, r18
 9e4:	06 c0       	rjmp	.+12     	; 0x9f2 <__stack+0x193>
 9e6:	28 e0       	ldi	r18, 0x08	; 8
 9e8:	30 e0       	ldi	r19, 0x00	; 0
 9ea:	05 c0       	rjmp	.+10     	; 0x9f6 <__stack+0x197>
 9ec:	20 e1       	ldi	r18, 0x10	; 16
 9ee:	30 e0       	ldi	r19, 0x00	; 0
 9f0:	02 c0       	rjmp	.+4      	; 0x9f6 <__stack+0x197>
 9f2:	20 e1       	ldi	r18, 0x10	; 16
 9f4:	32 e0       	ldi	r19, 0x02	; 2
 9f6:	f8 01       	movw	r30, r16
 9f8:	b7 fe       	sbrs	r11, 7
 9fa:	07 c0       	rjmp	.+14     	; 0xa0a <__stack+0x1ab>
 9fc:	60 81       	ld	r22, Z
 9fe:	71 81       	ldd	r23, Z+1	; 0x01
 a00:	82 81       	ldd	r24, Z+2	; 0x02
 a02:	93 81       	ldd	r25, Z+3	; 0x03
 a04:	0c 5f       	subi	r16, 0xFC	; 252
 a06:	1f 4f       	sbci	r17, 0xFF	; 255
 a08:	06 c0       	rjmp	.+12     	; 0xa16 <__stack+0x1b7>
 a0a:	60 81       	ld	r22, Z
 a0c:	71 81       	ldd	r23, Z+1	; 0x01
 a0e:	80 e0       	ldi	r24, 0x00	; 0
 a10:	90 e0       	ldi	r25, 0x00	; 0
 a12:	0e 5f       	subi	r16, 0xFE	; 254
 a14:	1f 4f       	sbci	r17, 0xFF	; 255
 a16:	a3 01       	movw	r20, r6
 a18:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__ultoa_invert>
 a1c:	88 2e       	mov	r8, r24
 a1e:	86 18       	sub	r8, r6
 a20:	fb 2d       	mov	r31, r11
 a22:	ff 77       	andi	r31, 0x7F	; 127
 a24:	3f 2e       	mov	r3, r31
 a26:	36 fe       	sbrs	r3, 6
 a28:	0d c0       	rjmp	.+26     	; 0xa44 <__stack+0x1e5>
 a2a:	23 2d       	mov	r18, r3
 a2c:	2e 7f       	andi	r18, 0xFE	; 254
 a2e:	a2 2e       	mov	r10, r18
 a30:	89 14       	cp	r8, r9
 a32:	58 f4       	brcc	.+22     	; 0xa4a <__stack+0x1eb>
 a34:	34 fe       	sbrs	r3, 4
 a36:	0b c0       	rjmp	.+22     	; 0xa4e <__stack+0x1ef>
 a38:	32 fc       	sbrc	r3, 2
 a3a:	09 c0       	rjmp	.+18     	; 0xa4e <__stack+0x1ef>
 a3c:	83 2d       	mov	r24, r3
 a3e:	8e 7e       	andi	r24, 0xEE	; 238
 a40:	a8 2e       	mov	r10, r24
 a42:	05 c0       	rjmp	.+10     	; 0xa4e <__stack+0x1ef>
 a44:	b8 2c       	mov	r11, r8
 a46:	a3 2c       	mov	r10, r3
 a48:	03 c0       	rjmp	.+6      	; 0xa50 <__stack+0x1f1>
 a4a:	b8 2c       	mov	r11, r8
 a4c:	01 c0       	rjmp	.+2      	; 0xa50 <__stack+0x1f1>
 a4e:	b9 2c       	mov	r11, r9
 a50:	a4 fe       	sbrs	r10, 4
 a52:	0f c0       	rjmp	.+30     	; 0xa72 <__stack+0x213>
 a54:	fe 01       	movw	r30, r28
 a56:	e8 0d       	add	r30, r8
 a58:	f1 1d       	adc	r31, r1
 a5a:	80 81       	ld	r24, Z
 a5c:	80 33       	cpi	r24, 0x30	; 48
 a5e:	21 f4       	brne	.+8      	; 0xa68 <__stack+0x209>
 a60:	9a 2d       	mov	r25, r10
 a62:	99 7e       	andi	r25, 0xE9	; 233
 a64:	a9 2e       	mov	r10, r25
 a66:	09 c0       	rjmp	.+18     	; 0xa7a <__stack+0x21b>
 a68:	a2 fe       	sbrs	r10, 2
 a6a:	06 c0       	rjmp	.+12     	; 0xa78 <__stack+0x219>
 a6c:	b3 94       	inc	r11
 a6e:	b3 94       	inc	r11
 a70:	04 c0       	rjmp	.+8      	; 0xa7a <__stack+0x21b>
 a72:	8a 2d       	mov	r24, r10
 a74:	86 78       	andi	r24, 0x86	; 134
 a76:	09 f0       	breq	.+2      	; 0xa7a <__stack+0x21b>
 a78:	b3 94       	inc	r11
 a7a:	a3 fc       	sbrc	r10, 3
 a7c:	11 c0       	rjmp	.+34     	; 0xaa0 <__stack+0x241>
 a7e:	a0 fe       	sbrs	r10, 0
 a80:	06 c0       	rjmp	.+12     	; 0xa8e <__stack+0x22f>
 a82:	b2 14       	cp	r11, r2
 a84:	88 f4       	brcc	.+34     	; 0xaa8 <__stack+0x249>
 a86:	28 0c       	add	r2, r8
 a88:	92 2c       	mov	r9, r2
 a8a:	9b 18       	sub	r9, r11
 a8c:	0e c0       	rjmp	.+28     	; 0xaaa <__stack+0x24b>
 a8e:	b2 14       	cp	r11, r2
 a90:	60 f4       	brcc	.+24     	; 0xaaa <__stack+0x24b>
 a92:	b6 01       	movw	r22, r12
 a94:	80 e2       	ldi	r24, 0x20	; 32
 a96:	90 e0       	ldi	r25, 0x00	; 0
 a98:	0e 94 b4 05 	call	0xb68	; 0xb68 <fputc>
 a9c:	b3 94       	inc	r11
 a9e:	f7 cf       	rjmp	.-18     	; 0xa8e <__stack+0x22f>
 aa0:	b2 14       	cp	r11, r2
 aa2:	18 f4       	brcc	.+6      	; 0xaaa <__stack+0x24b>
 aa4:	2b 18       	sub	r2, r11
 aa6:	02 c0       	rjmp	.+4      	; 0xaac <__stack+0x24d>
 aa8:	98 2c       	mov	r9, r8
 aaa:	21 2c       	mov	r2, r1
 aac:	a4 fe       	sbrs	r10, 4
 aae:	10 c0       	rjmp	.+32     	; 0xad0 <__stack+0x271>
 ab0:	b6 01       	movw	r22, r12
 ab2:	80 e3       	ldi	r24, 0x30	; 48
 ab4:	90 e0       	ldi	r25, 0x00	; 0
 ab6:	0e 94 b4 05 	call	0xb68	; 0xb68 <fputc>
 aba:	a2 fe       	sbrs	r10, 2
 abc:	17 c0       	rjmp	.+46     	; 0xaec <__stack+0x28d>
 abe:	a1 fc       	sbrc	r10, 1
 ac0:	03 c0       	rjmp	.+6      	; 0xac8 <__stack+0x269>
 ac2:	88 e7       	ldi	r24, 0x78	; 120
 ac4:	90 e0       	ldi	r25, 0x00	; 0
 ac6:	02 c0       	rjmp	.+4      	; 0xacc <__stack+0x26d>
 ac8:	88 e5       	ldi	r24, 0x58	; 88
 aca:	90 e0       	ldi	r25, 0x00	; 0
 acc:	b6 01       	movw	r22, r12
 ace:	0c c0       	rjmp	.+24     	; 0xae8 <__stack+0x289>
 ad0:	8a 2d       	mov	r24, r10
 ad2:	86 78       	andi	r24, 0x86	; 134
 ad4:	59 f0       	breq	.+22     	; 0xaec <__stack+0x28d>
 ad6:	a1 fe       	sbrs	r10, 1
 ad8:	02 c0       	rjmp	.+4      	; 0xade <__stack+0x27f>
 ada:	8b e2       	ldi	r24, 0x2B	; 43
 adc:	01 c0       	rjmp	.+2      	; 0xae0 <__stack+0x281>
 ade:	80 e2       	ldi	r24, 0x20	; 32
 ae0:	a7 fc       	sbrc	r10, 7
 ae2:	8d e2       	ldi	r24, 0x2D	; 45
 ae4:	b6 01       	movw	r22, r12
 ae6:	90 e0       	ldi	r25, 0x00	; 0
 ae8:	0e 94 b4 05 	call	0xb68	; 0xb68 <fputc>
 aec:	89 14       	cp	r8, r9
 aee:	38 f4       	brcc	.+14     	; 0xafe <__stack+0x29f>
 af0:	b6 01       	movw	r22, r12
 af2:	80 e3       	ldi	r24, 0x30	; 48
 af4:	90 e0       	ldi	r25, 0x00	; 0
 af6:	0e 94 b4 05 	call	0xb68	; 0xb68 <fputc>
 afa:	9a 94       	dec	r9
 afc:	f7 cf       	rjmp	.-18     	; 0xaec <__stack+0x28d>
 afe:	8a 94       	dec	r8
 b00:	f3 01       	movw	r30, r6
 b02:	e8 0d       	add	r30, r8
 b04:	f1 1d       	adc	r31, r1
 b06:	80 81       	ld	r24, Z
 b08:	b6 01       	movw	r22, r12
 b0a:	90 e0       	ldi	r25, 0x00	; 0
 b0c:	0e 94 b4 05 	call	0xb68	; 0xb68 <fputc>
 b10:	81 10       	cpse	r8, r1
 b12:	f5 cf       	rjmp	.-22     	; 0xafe <__stack+0x29f>
 b14:	22 20       	and	r2, r2
 b16:	09 f4       	brne	.+2      	; 0xb1a <__stack+0x2bb>
 b18:	42 ce       	rjmp	.-892    	; 0x79e <vfprintf+0x24>
 b1a:	b6 01       	movw	r22, r12
 b1c:	80 e2       	ldi	r24, 0x20	; 32
 b1e:	90 e0       	ldi	r25, 0x00	; 0
 b20:	0e 94 b4 05 	call	0xb68	; 0xb68 <fputc>
 b24:	2a 94       	dec	r2
 b26:	f6 cf       	rjmp	.-20     	; 0xb14 <__stack+0x2b5>
 b28:	f6 01       	movw	r30, r12
 b2a:	86 81       	ldd	r24, Z+6	; 0x06
 b2c:	97 81       	ldd	r25, Z+7	; 0x07
 b2e:	02 c0       	rjmp	.+4      	; 0xb34 <__stack+0x2d5>
 b30:	8f ef       	ldi	r24, 0xFF	; 255
 b32:	9f ef       	ldi	r25, 0xFF	; 255
 b34:	2b 96       	adiw	r28, 0x0b	; 11
 b36:	e2 e1       	ldi	r30, 0x12	; 18
 b38:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <__epilogue_restores__>

00000b3c <strnlen_P>:
 b3c:	fc 01       	movw	r30, r24
 b3e:	05 90       	lpm	r0, Z+
 b40:	61 50       	subi	r22, 0x01	; 1
 b42:	70 40       	sbci	r23, 0x00	; 0
 b44:	01 10       	cpse	r0, r1
 b46:	d8 f7       	brcc	.-10     	; 0xb3e <strnlen_P+0x2>
 b48:	80 95       	com	r24
 b4a:	90 95       	com	r25
 b4c:	8e 0f       	add	r24, r30
 b4e:	9f 1f       	adc	r25, r31
 b50:	08 95       	ret

00000b52 <strnlen>:
 b52:	fc 01       	movw	r30, r24
 b54:	61 50       	subi	r22, 0x01	; 1
 b56:	70 40       	sbci	r23, 0x00	; 0
 b58:	01 90       	ld	r0, Z+
 b5a:	01 10       	cpse	r0, r1
 b5c:	d8 f7       	brcc	.-10     	; 0xb54 <strnlen+0x2>
 b5e:	80 95       	com	r24
 b60:	90 95       	com	r25
 b62:	8e 0f       	add	r24, r30
 b64:	9f 1f       	adc	r25, r31
 b66:	08 95       	ret

00000b68 <fputc>:
 b68:	0f 93       	push	r16
 b6a:	1f 93       	push	r17
 b6c:	cf 93       	push	r28
 b6e:	df 93       	push	r29
 b70:	fb 01       	movw	r30, r22
 b72:	23 81       	ldd	r18, Z+3	; 0x03
 b74:	21 fd       	sbrc	r18, 1
 b76:	03 c0       	rjmp	.+6      	; 0xb7e <fputc+0x16>
 b78:	8f ef       	ldi	r24, 0xFF	; 255
 b7a:	9f ef       	ldi	r25, 0xFF	; 255
 b7c:	2c c0       	rjmp	.+88     	; 0xbd6 <fputc+0x6e>
 b7e:	22 ff       	sbrs	r18, 2
 b80:	16 c0       	rjmp	.+44     	; 0xbae <fputc+0x46>
 b82:	46 81       	ldd	r20, Z+6	; 0x06
 b84:	57 81       	ldd	r21, Z+7	; 0x07
 b86:	24 81       	ldd	r18, Z+4	; 0x04
 b88:	35 81       	ldd	r19, Z+5	; 0x05
 b8a:	42 17       	cp	r20, r18
 b8c:	53 07       	cpc	r21, r19
 b8e:	44 f4       	brge	.+16     	; 0xba0 <fputc+0x38>
 b90:	a0 81       	ld	r26, Z
 b92:	b1 81       	ldd	r27, Z+1	; 0x01
 b94:	9d 01       	movw	r18, r26
 b96:	2f 5f       	subi	r18, 0xFF	; 255
 b98:	3f 4f       	sbci	r19, 0xFF	; 255
 b9a:	31 83       	std	Z+1, r19	; 0x01
 b9c:	20 83       	st	Z, r18
 b9e:	8c 93       	st	X, r24
 ba0:	26 81       	ldd	r18, Z+6	; 0x06
 ba2:	37 81       	ldd	r19, Z+7	; 0x07
 ba4:	2f 5f       	subi	r18, 0xFF	; 255
 ba6:	3f 4f       	sbci	r19, 0xFF	; 255
 ba8:	37 83       	std	Z+7, r19	; 0x07
 baa:	26 83       	std	Z+6, r18	; 0x06
 bac:	14 c0       	rjmp	.+40     	; 0xbd6 <fputc+0x6e>
 bae:	8b 01       	movw	r16, r22
 bb0:	ec 01       	movw	r28, r24
 bb2:	fb 01       	movw	r30, r22
 bb4:	00 84       	ldd	r0, Z+8	; 0x08
 bb6:	f1 85       	ldd	r31, Z+9	; 0x09
 bb8:	e0 2d       	mov	r30, r0
 bba:	09 95       	icall
 bbc:	89 2b       	or	r24, r25
 bbe:	e1 f6       	brne	.-72     	; 0xb78 <fputc+0x10>
 bc0:	d8 01       	movw	r26, r16
 bc2:	16 96       	adiw	r26, 0x06	; 6
 bc4:	8d 91       	ld	r24, X+
 bc6:	9c 91       	ld	r25, X
 bc8:	17 97       	sbiw	r26, 0x07	; 7
 bca:	01 96       	adiw	r24, 0x01	; 1
 bcc:	17 96       	adiw	r26, 0x07	; 7
 bce:	9c 93       	st	X, r25
 bd0:	8e 93       	st	-X, r24
 bd2:	16 97       	sbiw	r26, 0x06	; 6
 bd4:	ce 01       	movw	r24, r28
 bd6:	df 91       	pop	r29
 bd8:	cf 91       	pop	r28
 bda:	1f 91       	pop	r17
 bdc:	0f 91       	pop	r16
 bde:	08 95       	ret

00000be0 <__ultoa_invert>:
 be0:	fa 01       	movw	r30, r20
 be2:	aa 27       	eor	r26, r26
 be4:	28 30       	cpi	r18, 0x08	; 8
 be6:	51 f1       	breq	.+84     	; 0xc3c <__ultoa_invert+0x5c>
 be8:	20 31       	cpi	r18, 0x10	; 16
 bea:	81 f1       	breq	.+96     	; 0xc4c <__ultoa_invert+0x6c>
 bec:	e8 94       	clt
 bee:	6f 93       	push	r22
 bf0:	6e 7f       	andi	r22, 0xFE	; 254
 bf2:	6e 5f       	subi	r22, 0xFE	; 254
 bf4:	7f 4f       	sbci	r23, 0xFF	; 255
 bf6:	8f 4f       	sbci	r24, 0xFF	; 255
 bf8:	9f 4f       	sbci	r25, 0xFF	; 255
 bfa:	af 4f       	sbci	r26, 0xFF	; 255
 bfc:	b1 e0       	ldi	r27, 0x01	; 1
 bfe:	3e d0       	rcall	.+124    	; 0xc7c <__ultoa_invert+0x9c>
 c00:	b4 e0       	ldi	r27, 0x04	; 4
 c02:	3c d0       	rcall	.+120    	; 0xc7c <__ultoa_invert+0x9c>
 c04:	67 0f       	add	r22, r23
 c06:	78 1f       	adc	r23, r24
 c08:	89 1f       	adc	r24, r25
 c0a:	9a 1f       	adc	r25, r26
 c0c:	a1 1d       	adc	r26, r1
 c0e:	68 0f       	add	r22, r24
 c10:	79 1f       	adc	r23, r25
 c12:	8a 1f       	adc	r24, r26
 c14:	91 1d       	adc	r25, r1
 c16:	a1 1d       	adc	r26, r1
 c18:	6a 0f       	add	r22, r26
 c1a:	71 1d       	adc	r23, r1
 c1c:	81 1d       	adc	r24, r1
 c1e:	91 1d       	adc	r25, r1
 c20:	a1 1d       	adc	r26, r1
 c22:	20 d0       	rcall	.+64     	; 0xc64 <__ultoa_invert+0x84>
 c24:	09 f4       	brne	.+2      	; 0xc28 <__ultoa_invert+0x48>
 c26:	68 94       	set
 c28:	3f 91       	pop	r19
 c2a:	2a e0       	ldi	r18, 0x0A	; 10
 c2c:	26 9f       	mul	r18, r22
 c2e:	11 24       	eor	r1, r1
 c30:	30 19       	sub	r19, r0
 c32:	30 5d       	subi	r19, 0xD0	; 208
 c34:	31 93       	st	Z+, r19
 c36:	de f6       	brtc	.-74     	; 0xbee <__ultoa_invert+0xe>
 c38:	cf 01       	movw	r24, r30
 c3a:	08 95       	ret
 c3c:	46 2f       	mov	r20, r22
 c3e:	47 70       	andi	r20, 0x07	; 7
 c40:	40 5d       	subi	r20, 0xD0	; 208
 c42:	41 93       	st	Z+, r20
 c44:	b3 e0       	ldi	r27, 0x03	; 3
 c46:	0f d0       	rcall	.+30     	; 0xc66 <__ultoa_invert+0x86>
 c48:	c9 f7       	brne	.-14     	; 0xc3c <__ultoa_invert+0x5c>
 c4a:	f6 cf       	rjmp	.-20     	; 0xc38 <__ultoa_invert+0x58>
 c4c:	46 2f       	mov	r20, r22
 c4e:	4f 70       	andi	r20, 0x0F	; 15
 c50:	40 5d       	subi	r20, 0xD0	; 208
 c52:	4a 33       	cpi	r20, 0x3A	; 58
 c54:	18 f0       	brcs	.+6      	; 0xc5c <__ultoa_invert+0x7c>
 c56:	49 5d       	subi	r20, 0xD9	; 217
 c58:	31 fd       	sbrc	r19, 1
 c5a:	40 52       	subi	r20, 0x20	; 32
 c5c:	41 93       	st	Z+, r20
 c5e:	02 d0       	rcall	.+4      	; 0xc64 <__ultoa_invert+0x84>
 c60:	a9 f7       	brne	.-22     	; 0xc4c <__ultoa_invert+0x6c>
 c62:	ea cf       	rjmp	.-44     	; 0xc38 <__ultoa_invert+0x58>
 c64:	b4 e0       	ldi	r27, 0x04	; 4
 c66:	a6 95       	lsr	r26
 c68:	97 95       	ror	r25
 c6a:	87 95       	ror	r24
 c6c:	77 95       	ror	r23
 c6e:	67 95       	ror	r22
 c70:	ba 95       	dec	r27
 c72:	c9 f7       	brne	.-14     	; 0xc66 <__ultoa_invert+0x86>
 c74:	00 97       	sbiw	r24, 0x00	; 0
 c76:	61 05       	cpc	r22, r1
 c78:	71 05       	cpc	r23, r1
 c7a:	08 95       	ret
 c7c:	9b 01       	movw	r18, r22
 c7e:	ac 01       	movw	r20, r24
 c80:	0a 2e       	mov	r0, r26
 c82:	06 94       	lsr	r0
 c84:	57 95       	ror	r21
 c86:	47 95       	ror	r20
 c88:	37 95       	ror	r19
 c8a:	27 95       	ror	r18
 c8c:	ba 95       	dec	r27
 c8e:	c9 f7       	brne	.-14     	; 0xc82 <__ultoa_invert+0xa2>
 c90:	62 0f       	add	r22, r18
 c92:	73 1f       	adc	r23, r19
 c94:	84 1f       	adc	r24, r20
 c96:	95 1f       	adc	r25, r21
 c98:	a0 1d       	adc	r26, r0
 c9a:	08 95       	ret

00000c9c <__prologue_saves__>:
 c9c:	2f 92       	push	r2
 c9e:	3f 92       	push	r3
 ca0:	4f 92       	push	r4
 ca2:	5f 92       	push	r5
 ca4:	6f 92       	push	r6
 ca6:	7f 92       	push	r7
 ca8:	8f 92       	push	r8
 caa:	9f 92       	push	r9
 cac:	af 92       	push	r10
 cae:	bf 92       	push	r11
 cb0:	cf 92       	push	r12
 cb2:	df 92       	push	r13
 cb4:	ef 92       	push	r14
 cb6:	ff 92       	push	r15
 cb8:	0f 93       	push	r16
 cba:	1f 93       	push	r17
 cbc:	cf 93       	push	r28
 cbe:	df 93       	push	r29
 cc0:	cd b7       	in	r28, 0x3d	; 61
 cc2:	de b7       	in	r29, 0x3e	; 62
 cc4:	ca 1b       	sub	r28, r26
 cc6:	db 0b       	sbc	r29, r27
 cc8:	0f b6       	in	r0, 0x3f	; 63
 cca:	f8 94       	cli
 ccc:	de bf       	out	0x3e, r29	; 62
 cce:	0f be       	out	0x3f, r0	; 63
 cd0:	cd bf       	out	0x3d, r28	; 61
 cd2:	09 94       	ijmp

00000cd4 <__epilogue_restores__>:
 cd4:	2a 88       	ldd	r2, Y+18	; 0x12
 cd6:	39 88       	ldd	r3, Y+17	; 0x11
 cd8:	48 88       	ldd	r4, Y+16	; 0x10
 cda:	5f 84       	ldd	r5, Y+15	; 0x0f
 cdc:	6e 84       	ldd	r6, Y+14	; 0x0e
 cde:	7d 84       	ldd	r7, Y+13	; 0x0d
 ce0:	8c 84       	ldd	r8, Y+12	; 0x0c
 ce2:	9b 84       	ldd	r9, Y+11	; 0x0b
 ce4:	aa 84       	ldd	r10, Y+10	; 0x0a
 ce6:	b9 84       	ldd	r11, Y+9	; 0x09
 ce8:	c8 84       	ldd	r12, Y+8	; 0x08
 cea:	df 80       	ldd	r13, Y+7	; 0x07
 cec:	ee 80       	ldd	r14, Y+6	; 0x06
 cee:	fd 80       	ldd	r15, Y+5	; 0x05
 cf0:	0c 81       	ldd	r16, Y+4	; 0x04
 cf2:	1b 81       	ldd	r17, Y+3	; 0x03
 cf4:	aa 81       	ldd	r26, Y+2	; 0x02
 cf6:	b9 81       	ldd	r27, Y+1	; 0x01
 cf8:	ce 0f       	add	r28, r30
 cfa:	d1 1d       	adc	r29, r1
 cfc:	0f b6       	in	r0, 0x3f	; 63
 cfe:	f8 94       	cli
 d00:	de bf       	out	0x3e, r29	; 62
 d02:	0f be       	out	0x3f, r0	; 63
 d04:	cd bf       	out	0x3d, r28	; 61
 d06:	ed 01       	movw	r28, r26
 d08:	08 95       	ret

00000d0a <_exit>:
 d0a:	f8 94       	cli

00000d0c <__stop_program>:
 d0c:	ff cf       	rjmp	.-2      	; 0xd0c <__stop_program>
